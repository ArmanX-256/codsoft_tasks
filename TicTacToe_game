#include <iostream>
#include <limits>

using namespace std;

const int SIZE = 3;

void displayBoard(char board[SIZE][SIZE]) {
    cout << "\n   0   1   2\n";
    for (int i = 0; i < SIZE; ++i) {
        cout << i << " ";
        for (int j = 0; j < SIZE; ++j) {
            cout << (board[i][j] == ' ' ? '.' : board[i][j]);
            if (j < SIZE - 1) cout << " | ";
        }
        cout << "\n";
        if (i < SIZE - 1) cout << "  ---+---+---\n";
    }
    cout << "\n";
}

bool isWinner(char board[SIZE][SIZE], char player) {
    for (int i = 0; i < SIZE; ++i) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||  
            (board[0][i] == player && board[1][i] == player && board[2][i] == player))   
            return true;
    }
    return (board[0][0] == player && board[1][1] == player && board[2][2] == player) ||  
           (board[0][2] == player && board[1][1] == player && board[2][0] == player);   
}

bool isDraw(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; ++i)
        for (int j = 0; j < SIZE; ++j)
            if (board[i][j] == ' ') return false;
    return true;
}

void getPlayerMove(char board[SIZE][SIZE], char player) {
    int row, col;
    while (true) {
        cout << "Player " << player << ", enter row and column (0-2): ";
        if (cin >> row >> col && row >= 0 && row < SIZE && col >= 0 && col < SIZE && board[row][col] == ' ') {
            board[row][col] = player;
            break;
        }
        cout << "Invalid move! Try again.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }
}

int main() {
    char board[SIZE][SIZE]; 
    for (int i = 0; i < SIZE; ++i)
        for (int j = 0; j < SIZE; ++j)
            board[i][j] = ' ';

    char currentPlayer = 'X';
    cout << "Welcome to Tic-Tac-Toe!\n";

    while (true) {
        displayBoard(board);
        getPlayerMove(board, currentPlayer);

        if (isWinner(board, currentPlayer)) {
            displayBoard(board);
            cout << "Player " << currentPlayer << " wins!\n";
            break;
        }

        if (isDraw(board)) {
            displayBoard(board);
            cout << "It's a draw!\n";
            break;
        }
        
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}
